# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ windows-build-pipeline ]
  pull_request:
    branches: [ windows-build-pipeline ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Move all files EXCEPT the newly created folder into the folder
      # grep -E  uses regex
      # '^Blaize_V3$|\.|\..'  matches "Blaize_V3", "." and ".." directories
      # ^Blaize_V3$  selects only "Blaize_V3" (directory) and not "Blaize_V3.pde" (file)
      # xargs -J letsyou specify a variable (e.g. "%") which gets replaced by the input args
      #ls -a | grep --invert-match --extended-regexp '^Blaize_V3$|^\.$|^\.\.$' | xargs mv --target-directory=Blaize_V3; FOR UBUNTU
      #ls -a | grep --invert-match --extended-regexp '^Blaize_V3$|^\.$|^\.\.$' | xargs -J % mv % Blaize_V3; FOR MACOS
      - name: Move sketch files to sketch folder
        run:
          mkdir Blaize_V3;
          ls -a | grep --invert-match --extended-regexp '^Blaize_V3$|^\.$|^\.\.$' | xargs mv --target-directory=Blaize_V3;
          ls -al;
          ls -al Blaize_V3;
          
      - name: Download processing
        run: wget https://github.com/processing/processing/releases/download/processing-0270-3.5.4/processing-3.5.4-linux64.tgz
      
      - name: Unpack Processing
        run:
          tar zxvf processing-3.5.4-linux64.tgz;
          cd processing-3.5.4;
          ./install.sh;
          ls -al;
          cd ..;
          ls -al;
      
      - name: Install 32bit libs
        run: sudo apt update && sudo apt install lib32z1
      
      # - name: Install video library
      #   run:
      #    wget https://github.com/processing/processing-video/archive/refs/tags/latest-processing3.tar.gz;
      #    tar zxvf latest-processing3.tar.gz;
      #    mkdir libraries;
      #    mv processing-video-latest-processing3 libraries/video;
      #    ls -al;
      #    cd libraries;
      #    ls -al;
      
      - name: ll
        run:
          ls -al;
          cd processing-3.5.4;
          ls -al;
      
      - name: Build App
        run:
          cd processing-3.5.4;
          ./processing-java --sketch=../Blaize_V3 --build;
      
      - name: Export App
        run:
         cd processing-3.5.4;
         ./processing-java --sketch=../Blaize_V3 --output=../windows-build --platform=windows --export;
          
      - name: Zip App
        run:
          zip -r windows.zip ./windows-build
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: windows.zip
          asset_name: Blaize_V3_Windows.zip
          asset_content_type: application/zip
